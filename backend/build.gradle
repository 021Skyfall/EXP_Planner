plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.0'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.jetbrains.kotlin.jvm' version '2.0.0' // 코틀린 JVM 플러그인
	id 'org.jetbrains.kotlin.plugin.spring' version '2.0.0' // 코틀린에서 스프링을 쓰기 위한 플러그인
	id 'org.jetbrains.kotlin.plugin.jpa' version '2.0.0' // 코틀린에서 JPA를 쓰기 위한 플러그인
}

group = 'com.exp_planner'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Kotlin
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

	// Spring
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin' // Kotlin 객체를 JSON으로 변환하기 위해 추가

	// Lombok (Java 클래스에만 필요)
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// db
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'

	// mapStructor
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0' // 롬복과 충돌 방지

	// test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.jetbrains.kotlin:kotlin-test:2.0.0'
	testImplementation 'org.mockito.kotlin:mockito-kotlin:5.4.0'

	// docs
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
}

tasks.named('test') {
	useJUnitPlatform()
}

allOpen { // 코틀린의 final 클래스를 스프링에서 사용할 수 있게 열어주는 설정
	annotation("jakarta.persistence.Entity")
	annotation("jakarta.persistence.MappedSuperclass")
	annotation("jakarta.persistence.Embeddable")
}

noArg { // JPA Entity를 위한 기본 생성자를 만들어주는 설정
	annotation("jakarta.persistence.Entity")
	annotation("jakarta.persistence.MappedSuperclass")
	annotation("jakarta.persistence.Embeddable")
}